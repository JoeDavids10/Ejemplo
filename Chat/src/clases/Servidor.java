/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clases;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author administrador
 */
public class Servidor extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ServidorDiseño
     */
    public Servidor() {
        initComponents();
        Thread hilo_serv = new Thread(this);
        hilo_serv.start();
    }
    
     @Override
    public void run() {
        try { 
            ServerSocket servidor = new ServerSocket(9000); //aquí ponemos a la escucho a nuestro servidor con el puerto abierto
            String username, ipadress, mensaje; //variables para guardar los objetos del paquete
            Mensaje mensaje_recibido = new Mensaje(); //instancia de la clase mensaje
 
            while (true) {  
                Socket socketServer = servidor.accept(); // aquí acepta cualquier conexión que venga del cliente, el crea un nuevo socket para poderse comunicar
                ObjectInputStream paquete_entrada = new ObjectInputStream(socketServer.getInputStream()); //creamos el flujo de datos de entrada
                mensaje_recibido = (Mensaje) paquete_entrada.readObject(); //le decimos que lea con readobject el flujo de datos y lo que se encuentre allí lo almacene en paquete entrada
                username = mensaje_recibido.getUsername();
                ipadress = mensaje_recibido.getIpadress();
                mensaje = mensaje_recibido.getMensaje();    
                texto_serv.append("\n" + username + ": xxxxx");
                  
                Socket puente = new Socket(ipadress, 9090);// crearmos el socket que nos servirá de puente para enviar la información al otro cliente
                ObjectOutputStream Envio_datos = new ObjectOutputStream(puente.getOutputStream()); //creamos el flujo de salida
                Envio_datos.writeObject(mensaje_recibido);
                Envio_datos.close();
                puente.close();

//            DataInputStream entrada = new DataInputStream(socketServer.getInputStream()); // el flujo de datos utiliza el socket del servidor como medio de transmision de los datos
//            String mensajeEntrada = entrada.readUTF(); //guardo en la variable mensajeEntrada lo que me llegue del servidor        
//            textoServidor.append("\n" + mensajeEntrada); 
                socketServer.close();
            }

        } catch (IOException ex) {
            ex.getMessage(); //mensaje por si no hay conexión o tarda mucho
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HabilitarCon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto_serv = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        HabilitarCon.setText("Cerrar Servidor");
        HabilitarCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HabilitarConActionPerformed(evt);
            }
        });

        texto_serv.setColumns(20);
        texto_serv.setRows(5);
        jScrollPane1.setViewportView(texto_serv);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(HabilitarCon)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(HabilitarCon)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HabilitarConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HabilitarConActionPerformed
        // TODO add your handling code here:
        System.exit(WIDTH);
    }//GEN-LAST:event_HabilitarConActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HabilitarCon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto_serv;
    // End of variables declaration//GEN-END:variables
}
